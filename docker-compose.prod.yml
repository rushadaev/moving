services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    command: sh -c "npm run build && cp -r dist/* /var/www/frontend/"
    volumes:
      - frontend_dist:/var/www/frontend
    networks:
      - app-network

  nginx:
    image: nginx:1.25-alpine
    container_name: moving-nginx-1
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d/production.conf:/etc/nginx/conf.d/default.conf
      - frontend_dist:/var/www/frontend
      - ./backend:/var/www/backend
      - /etc/letsencrypt/live/mooweemoving.com/fullchain.pem:/etc/letsencrypt/live/mooweemoving.com/fullchain.pem:ro
      - /etc/letsencrypt/live/mooweemoving.com/privkey.pem:/etc/letsencrypt/live/mooweemoving.com/privkey.pem:ro
    depends_on:
      - frontend
      - backend
    networks:
      - app-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - ./backend:/var/www/html
      - backend_vendor:/var/www/html/vendor
      - ./.env:/var/www/html/.env
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - app-network

  mysql:
    image: mysql:8.0
    ports:
      - "3307:3306"
    environment:
      - MYSQL_DATABASE=${DB_DATABASE}
      - MYSQL_USER=${DB_USERNAME}
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${DOCKER_MYSQL_ROOT_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  app-network:
    driver: bridge

volumes:
  mysql_data:
  frontend_dist:
  backend_vendor: 